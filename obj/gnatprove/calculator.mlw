(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TnaturalarrayD1" defined at calculator.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Calculator__TnaturalarrayD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tnaturalarrayD1 =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tnaturalarrayD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tnaturalarrayD1__ref =
  { mutable tnaturalarrayD1__content "model_trace:" "name:" : tnaturalarrayD1 }
 
 function tnaturalarrayD1__ref___projection 
   (a : tnaturalarrayD1__ref) : tnaturalarrayD1 =
  a.tnaturalarrayD1__content
 
 meta "model_projection" function tnaturalarrayD1__ref___projection
 
 meta "inline : no" function tnaturalarrayD1__ref___projection
 
 val tnaturalarrayD1__havoc 
   (x : tnaturalarrayD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TnaturalarrayD1" defined at calculator.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Calculator__TnaturalarrayD1__rep
 use        Calculator__TnaturalarrayD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__TnaturalarrayD1.tnaturalarrayD1) : int =
  (Calculator__TnaturalarrayD1.tnaturalarrayD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__TnaturalarrayD1.tnaturalarrayD1, 
 predicate in_range = Calculator__TnaturalarrayD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TnaturalarrayB" defined at calculator.ads:3, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__natural.natural
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__natural__rep.to_rep (get a temp___idx_154)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__natural__rep.to_rep (get a temp___idx_154)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TnaturalarrayB" defined at calculator.ads:3, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__natural__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__natural.component_type, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TnaturalarrayB" defined at calculator.ads:3, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__natural_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural__rep
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__natural.component_type, 
 function to_rep = Standard__natural__rep.to_rep, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get, 
 function bool_eq = Array__Int__Standard__natural.bool_eq

end

(* Module for axiomatizing type "TnaturalarrayB" defined at calculator.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Calculator__TnaturalarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        Calculator__TnaturalarrayD1
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Calculator__TnaturalarrayD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tnaturalarrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tnaturalarrayB__ref =
  { mutable tnaturalarrayB__content "model_trace:" "name:" : tnaturalarrayB }
 
 function tnaturalarrayB__ref___projection 
   (a : tnaturalarrayB__ref) : tnaturalarrayB =
  a.tnaturalarrayB__content
 
 meta "model_projection" function tnaturalarrayB__ref___projection
 
 meta "inline : no" function tnaturalarrayB__ref___projection
 
 val tnaturalarrayB__havoc 
   (x : tnaturalarrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "naturalarray" defined at calculator.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Calculator__naturalarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "v1" defined at calculator.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__multiplyarrays__v1
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v1 #"calculator.ads" 5 0 0#"model_projected" "model_trace:3087" "name:v1" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v1" defined at calculator.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__multiplyarrays__v1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v2" defined at calculator.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__multiplyarrays__v2
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v2 #"calculator.ads" 5 0 0#"model_projected" "model_trace:3096" "name:v2" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v2" defined at calculator.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__multiplyarrays__v2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "length" defined at calculator.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__multiplyarrays__length
 use import "_gnatprove_standard".Main

 function length #"calculator.ads" 5 0 0#"model" "model_trace:3105" "name:length" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "length" defined at calculator.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__multiplyarrays__length___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T12s" defined at calculator.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculator__multiplyarrays__L11s__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t12s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t12s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t12s__ref =
  { mutable t12s__content "model_trace:" "name:" : t12s }
 
 function t12s__ref___projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref___projection
 
 meta "inline : no" function t12s__ref___projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T12s" defined at calculator.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculator__multiplyarrays__L11s__T12s__rep
 use        Calculator__multiplyarrays__L11s__T12s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__multiplyarrays__L11s__T12s.t12s) : int =
  (Calculator__multiplyarrays__L11s__T12s.t12s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__multiplyarrays__L11s__T12s.t12s, 
 predicate in_range = Calculator__multiplyarrays__L11s__T12s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T14s" defined at calculator.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Calculator__multiplyarrays__L13s__T14s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t14s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t14s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t14s__ref =
  { mutable t14s__content "model_trace:" "name:" : t14s }
 
 function t14s__ref___projection 
   (a : t14s__ref) : t14s =
  a.t14s__content
 
 meta "model_projection" function t14s__ref___projection
 
 meta "inline : no" function t14s__ref___projection
 
 val t14s__havoc 
   (x : t14s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T14s" defined at calculator.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Calculator__multiplyarrays__L13s__T14s__rep
 use        Calculator__multiplyarrays__L13s__T14s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__multiplyarrays__L13s__T14s.t14s) : int =
  (Calculator__multiplyarrays__L13s__T14s.t14s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__multiplyarrays__L13s__T14s.t14s, 
 predicate in_range = Calculator__multiplyarrays__L13s__T14s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T16s" defined at calculator.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculator__multiplyarrays__L15s__T16s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16s__ref =
  { mutable t16s__content "model_trace:" "name:" : t16s }
 
 function t16s__ref___projection 
   (a : t16s__ref) : t16s =
  a.t16s__content
 
 meta "model_projection" function t16s__ref___projection
 
 meta "inline : no" function t16s__ref___projection
 
 val t16s__havoc 
   (x : t16s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "multiplyarrays" defined at calculator.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__multiplyarrays
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 function multiplyarrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
 
 predicate multiplyarrays__function_guard 
   (result : Array__Int__Standard__natural.map) (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) 

end

(* Module for defining the constant "v1" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__dividearrays__v1
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v1 #"calculator.ads" 21 0 0#"model_projected" "name:v1" "model_trace:3297" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v1" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__dividearrays__v1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v2" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__dividearrays__v2
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v2 #"calculator.ads" 21 0 0#"model_projected" "name:v2" "model_trace:3306" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v2" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__dividearrays__v2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "length" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__dividearrays__length
 use import "_gnatprove_standard".Main

 function length #"calculator.ads" 21 0 0#"model" "name:length" "model_trace:3315" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "length" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__dividearrays__length___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T18s" defined at calculator.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Calculator__dividearrays__L17s__T18s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t18s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t18s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t18s__ref =
  { mutable t18s__content "model_trace:" "name:" : t18s }
 
 function t18s__ref___projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref___projection
 
 meta "inline : no" function t18s__ref___projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T18s" defined at calculator.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Calculator__dividearrays__L17s__T18s__rep
 use        Calculator__dividearrays__L17s__T18s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__dividearrays__L17s__T18s.t18s) : int =
  (Calculator__dividearrays__L17s__T18s.t18s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__dividearrays__L17s__T18s.t18s, 
 predicate in_range = Calculator__dividearrays__L17s__T18s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T20s" defined at calculator.ads:30, created in Gnat2Why.Types.Translate_Type *)
module Calculator__dividearrays__L19s__T20s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t20s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t20s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t20s__ref =
  { mutable t20s__content "model_trace:" "name:" : t20s }
 
 function t20s__ref___projection 
   (a : t20s__ref) : t20s =
  a.t20s__content
 
 meta "model_projection" function t20s__ref___projection
 
 meta "inline : no" function t20s__ref___projection
 
 val t20s__havoc 
   (x : t20s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T20s" defined at calculator.ads:30, created in Gnat2Why.Types.Translate_Type *)
module Calculator__dividearrays__L19s__T20s__rep
 use        Calculator__dividearrays__L19s__T20s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__dividearrays__L19s__T20s.t20s) : int =
  (Calculator__dividearrays__L19s__T20s.t20s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__dividearrays__L19s__T20s.t20s, 
 predicate in_range = Calculator__dividearrays__L19s__T20s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T22s" defined at calculator.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Calculator__dividearrays__L21s__T22s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t22s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t22s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t22s__ref =
  { mutable t22s__content "model_trace:" "name:" : t22s }
 
 function t22s__ref___projection 
   (a : t22s__ref) : t22s =
  a.t22s__content
 
 meta "model_projection" function t22s__ref___projection
 
 meta "inline : no" function t22s__ref___projection
 
 val t22s__havoc 
   (x : t22s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "dividearrays" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__dividearrays
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 function dividearrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
 
 predicate dividearrays__function_guard 
   (result : Array__Int__Standard__natural.map) (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) 

end

(* Module for defining the constant "v1" defined at calculator.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__biggernumberarrays__v1
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v1 #"calculator.ads" 34 0 0#"model_projected" "name:v1" "model_trace:3440" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v1" defined at calculator.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__biggernumberarrays__v1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v2" defined at calculator.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__biggernumberarrays__v2
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v2 #"calculator.ads" 34 0 0#"model_projected" "name:v2" "model_trace:3449" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v2" defined at calculator.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__biggernumberarrays__v2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "length" defined at calculator.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__biggernumberarrays__length
 use import "_gnatprove_standard".Main

 function length #"calculator.ads" 34 0 0#"model" "name:length" "model_trace:3458" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "length" defined at calculator.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__biggernumberarrays__length___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T24s" defined at calculator.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Calculator__biggernumberarrays__L23s__T24s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t24s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t24s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t24s__ref =
  { mutable t24s__content "model_trace:" "name:" : t24s }
 
 function t24s__ref___projection 
   (a : t24s__ref) : t24s =
  a.t24s__content
 
 meta "model_projection" function t24s__ref___projection
 
 meta "inline : no" function t24s__ref___projection
 
 val t24s__havoc 
   (x : t24s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T24s" defined at calculator.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Calculator__biggernumberarrays__L23s__T24s__rep
 use        Calculator__biggernumberarrays__L23s__T24s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__biggernumberarrays__L23s__T24s.t24s) : int =
  (Calculator__biggernumberarrays__L23s__T24s.t24s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__biggernumberarrays__L23s__T24s.t24s, 
 predicate in_range = Calculator__biggernumberarrays__L23s__T24s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T26s" defined at calculator.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Calculator__biggernumberarrays__L25s__T26s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t26s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t26s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t26s__ref =
  { mutable t26s__content "model_trace:" "name:" : t26s }
 
 function t26s__ref___projection 
   (a : t26s__ref) : t26s =
  a.t26s__content
 
 meta "model_projection" function t26s__ref___projection
 
 meta "inline : no" function t26s__ref___projection
 
 val t26s__havoc 
   (x : t26s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T26s" defined at calculator.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Calculator__biggernumberarrays__L25s__T26s__rep
 use        Calculator__biggernumberarrays__L25s__T26s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__biggernumberarrays__L25s__T26s.t26s) : int =
  (Calculator__biggernumberarrays__L25s__T26s.t26s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__biggernumberarrays__L25s__T26s.t26s, 
 predicate in_range = Calculator__biggernumberarrays__L25s__T26s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T28s" defined at calculator.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Calculator__biggernumberarrays__L27s__T28s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t28s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t28s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t28s__ref =
  { mutable t28s__content "model_trace:" "name:" : t28s }
 
 function t28s__ref___projection 
   (a : t28s__ref) : t28s =
  a.t28s__content
 
 meta "model_projection" function t28s__ref___projection
 
 meta "inline : no" function t28s__ref___projection
 
 val t28s__havoc 
   (x : t28s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "biggernumberarrays" defined at calculator.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__biggernumberarrays
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 function biggernumberarrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
 
 predicate biggernumberarrays__function_guard 
   (result : Array__Int__Standard__natural.map) (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) 

end

(* Module for defining the constant "v1" defined at calculator.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__smallernumberarrays__v1
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v1 #"calculator.ads" 50 0 0#"model_projected" "name:v1" "model_trace:3596" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v1" defined at calculator.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__smallernumberarrays__v1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v2" defined at calculator.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__smallernumberarrays__v2
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function v2 #"calculator.ads" 50 0 0#"model_projected" "name:v2" "model_trace:3605" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v2" defined at calculator.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__smallernumberarrays__v2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "length" defined at calculator.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__smallernumberarrays__length
 use import "_gnatprove_standard".Main

 function length #"calculator.ads" 50 0 0#"model" "name:length" "model_trace:3614" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "length" defined at calculator.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__smallernumberarrays__length___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T30s" defined at calculator.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Calculator__smallernumberarrays__L29s__T30s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t30s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t30s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t30s__ref =
  { mutable t30s__content "model_trace:" "name:" : t30s }
 
 function t30s__ref___projection 
   (a : t30s__ref) : t30s =
  a.t30s__content
 
 meta "model_projection" function t30s__ref___projection
 
 meta "inline : no" function t30s__ref___projection
 
 val t30s__havoc 
   (x : t30s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T30s" defined at calculator.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Calculator__smallernumberarrays__L29s__T30s__rep
 use        Calculator__smallernumberarrays__L29s__T30s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__smallernumberarrays__L29s__T30s.t30s) : int =
  (Calculator__smallernumberarrays__L29s__T30s.t30s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__smallernumberarrays__L29s__T30s.t30s, 
 predicate in_range = Calculator__smallernumberarrays__L29s__T30s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T32s" defined at calculator.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Calculator__smallernumberarrays__L31s__T32s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t32s =
  < range 1 10 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t32s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t32s__ref =
  { mutable t32s__content "model_trace:" "name:" : t32s }
 
 function t32s__ref___projection 
   (a : t32s__ref) : t32s =
  a.t32s__content
 
 meta "model_projection" function t32s__ref___projection
 
 meta "inline : no" function t32s__ref___projection
 
 val t32s__havoc 
   (x : t32s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T32s" defined at calculator.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Calculator__smallernumberarrays__L31s__T32s__rep
 use        Calculator__smallernumberarrays__L31s__T32s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Calculator__smallernumberarrays__L31s__T32s.t32s) : int =
  (Calculator__smallernumberarrays__L31s__T32s.t32s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Calculator__smallernumberarrays__L31s__T32s.t32s, 
 predicate in_range = Calculator__smallernumberarrays__L31s__T32s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T34s" defined at calculator.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Calculator__smallernumberarrays__L33s__T34s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t34s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t34s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t34s__ref =
  { mutable t34s__content "model_trace:" "name:" : t34s }
 
 function t34s__ref___projection 
   (a : t34s__ref) : t34s =
  a.t34s__content
 
 meta "model_projection" function t34s__ref___projection
 
 meta "inline : no" function t34s__ref___projection
 
 val t34s__havoc 
   (x : t34s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "smallernumberarrays" defined at calculator.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__smallernumberarrays
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 function smallernumberarrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
 
 predicate smallernumberarrays__function_guard 
   (result : Array__Int__Standard__natural.map) (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) 

end

(* Module for axiomatizing type "T4b" defined at calculator.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Calculator__multiplyarrays__L_1__L3b__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content "model_trace:" "name:" : t4b }
 
 function t4b__ref___projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at calculator.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Calculator__multiplyarrays__L_1__L1b__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at calculator.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Calculator__dividearrays__L_2__L8b__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t9b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t9b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at calculator.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Calculator__dividearrays__L_2__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at calculator.adb:49, created in Gnat2Why.Types.Translate_Type *)
module Calculator__biggernumberarrays__L_3__L13b__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content "model_trace:" "name:" : t14b }
 
 function t14b__ref___projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at calculator.adb:49, created in Gnat2Why.Types.Translate_Type *)
module Calculator__biggernumberarrays__L_3__L11b__T12b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12b__ref =
  { mutable t12b__content "model_trace:" "name:" : t12b }
 
 function t12b__ref___projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref___projection
 
 meta "inline : no" function t12b__ref___projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T19b" defined at calculator.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Calculator__smallernumberarrays__L_4__L18b__T19b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t19b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t19b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t19b__ref =
  { mutable t19b__content "model_trace:" "name:" : t19b }
 
 function t19b__ref___projection 
   (a : t19b__ref) : t19b =
  a.t19b__content
 
 meta "model_projection" function t19b__ref___projection
 
 meta "inline : no" function t19b__ref___projection
 
 val t19b__havoc 
   (x : t19b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T17b" defined at calculator.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Calculator__smallernumberarrays__L_4__L16b__T17b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t17b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t17b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t17b__ref =
  { mutable t17b__content "model_trace:" "name:" : t17b }
 
 function t17b__ref___projection 
   (a : t17b__ref) : t17b =
  a.t17b__content
 
 meta "model_projection" function t17b__ref___projection
 
 meta "inline : no" function t17b__ref___projection
 
 val t17b__havoc 
   (x : t17b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "result" defined at calculator.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__multiplyarrays__result
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 val result__ #"calculator.adb" 4 0 0#"model_projected" "model_trace:2345" "name:result"  : Array__Int__Standard__natural.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at calculator.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__multiplyarrays__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "index" defined at calculator.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__multiplyarrays__index
 use import "_gnatprove_standard".Main

 val index #"calculator.adb" 5 0 0#"model_projected" "model_trace:2355" "name:index"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at calculator.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__multiplyarrays__index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at calculator.adb:20, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__dividearrays__result
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 val result__ #"calculator.adb" 20 0 0#"model_projected" "name:result" "model_trace:2495"  : Array__Int__Standard__natural.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at calculator.adb:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__dividearrays__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "index" defined at calculator.adb:21, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__dividearrays__index
 use import "_gnatprove_standard".Main

 val index #"calculator.adb" 21 0 0#"model_projected" "name:index" "model_trace:2505"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at calculator.adb:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__dividearrays__index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at calculator.adb:36, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__biggernumberarrays__result
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 val result__ #"calculator.adb" 36 0 0#"model_projected" "name:result" "model_trace:2628"  : Array__Int__Standard__natural.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at calculator.adb:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__biggernumberarrays__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "index" defined at calculator.adb:37, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__biggernumberarrays__index
 use import "_gnatprove_standard".Main

 val index #"calculator.adb" 37 0 0#"model_projected" "name:index" "model_trace:2638"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at calculator.adb:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__biggernumberarrays__index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at calculator.adb:55, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__smallernumberarrays__result
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 val result__ #"calculator.adb" 55 0 0#"model_projected" "name:result" "model_trace:2837"  : Array__Int__Standard__natural.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at calculator.adb:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__smallernumberarrays__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "index" defined at calculator.adb:56, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__smallernumberarrays__index
 use import "_gnatprove_standard".Main

 val index #"calculator.adb" 56 0 0#"model_projected" "name:index" "model_trace:2847"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at calculator.adb:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__smallernumberarrays__index___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at calculator.adb:7, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculator__multiplyarrays__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at calculator.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__multiplyarrays__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at calculator.adb:23, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculator__dividearrays__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at calculator.adb:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__dividearrays__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at calculator.adb:39, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculator__biggernumberarrays__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at calculator.adb:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__biggernumberarrays__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_4" defined at calculator.adb:58, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculator__smallernumberarrays__L_4
 use import "_gnatprove_standard".Main

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at calculator.adb:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__smallernumberarrays__L_4___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TnaturalarrayD1" defined at calculator.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__TnaturalarrayD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TnaturalarrayB" defined at calculator.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__TnaturalarrayB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "naturalarray" defined at calculator.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__naturalarray___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : Array__Int__Standard__natural.map) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_161 : Array__Int__Standard__natural.map) (temp___skip_top_level_162 : bool)  =
  true

end

(* Module giving axioms for type "T12s" defined at calculator.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__multiplyarrays__L11s__T12s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14s" defined at calculator.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__multiplyarrays__L13s__T14s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16s" defined at calculator.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__multiplyarrays__L15s__T16s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18s" defined at calculator.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__dividearrays__L17s__T18s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20s" defined at calculator.ads:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__dividearrays__L19s__T20s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T22s" defined at calculator.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__dividearrays__L21s__T22s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T24s" defined at calculator.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__biggernumberarrays__L23s__T24s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T26s" defined at calculator.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__biggernumberarrays__L25s__T26s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T28s" defined at calculator.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__biggernumberarrays__L27s__T28s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T30s" defined at calculator.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__smallernumberarrays__L29s__T30s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T32s" defined at calculator.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__smallernumberarrays__L31s__T32s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T34s" defined at calculator.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__smallernumberarrays__L33s__T34s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at calculator.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__multiplyarrays__L_1__L3b__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2b" defined at calculator.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__multiplyarrays__L_1__L1b__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9b" defined at calculator.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__dividearrays__L_2__L8b__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at calculator.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__dividearrays__L_2__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14b" defined at calculator.adb:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__biggernumberarrays__L_3__L13b__T14b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12b" defined at calculator.adb:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__biggernumberarrays__L_3__L11b__T12b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T19b" defined at calculator.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__smallernumberarrays__L_4__L18b__T19b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T17b" defined at calculator.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__smallernumberarrays__L_4__L16b__T17b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "multiplyarrays" defined at calculator.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__multiplyarrays___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        Standard__natural
 use        Standard__natural__rep
 use        Calculator__multiplyarrays
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 val multiplyarrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
  requires {  ( ( ( ( (length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "model_trace:3162" "name:x"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 x)) > 0)) then (
    ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 x))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 x)))) else (
    true)) )) ) /\ (forall x   "model" "name:x" "model_trace:3191"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 x)) > 0)) then (
    ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 x))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 x)))) else (
    true)) )) ) }
  ensures {  ( ( (result = (Calculator__multiplyarrays.multiplyarrays v1 v2 length)) /\ (Calculator__multiplyarrays.multiplyarrays__function_guard result v1 v2 length) ) /\ ( (Calculator__naturalarray___axiom.dynamic_invariant result True False True True) /\ (forall k   "model" "model_trace:3222" "name:k"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (( ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k)) = 0) \/ ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k)) = 0) )) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get result k)) = 0)) else ((if (( ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k))) /\ ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k))) )) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get result k)) = ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k)) * (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k))))) else (
    true)))) )) ) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "dividearrays" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__dividearrays___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        Standard__natural
 use        Standard__natural__rep
 use        Calculator__dividearrays
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 val dividearrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
  requires {  ( ( ( ( (length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "name:x" "model_trace:3372"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 x)) > 0) )) ) /\ (forall x   "model" "name:x" "model_trace:3389"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 x)) > 0) )) ) }
  ensures {  ( ( (result = (Calculator__dividearrays.dividearrays v1 v2 length)) /\ (Calculator__dividearrays.dividearrays__function_guard result v1 v2 length) ) /\ ( (Calculator__naturalarray___axiom.dynamic_invariant result True False True True) /\ (forall k   "model" "name:k" "model_trace:3408"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get result k)) = (Int_Division.div (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k)) (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k)))) )) ) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "biggernumberarrays" defined at calculator.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__biggernumberarrays___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep
 use        Calculator__biggernumberarrays
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 val biggernumberarrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
  requires {  ( ( ( ( (length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "name:x" "model_trace:3515"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 x)) > 0) )) ) /\ (forall x   "model" "name:x" "model_trace:3532"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 x)) > 0) )) ) }
  ensures {  ( ( (result = (Calculator__biggernumberarrays.biggernumberarrays v1 v2 length)) /\ (Calculator__biggernumberarrays.biggernumberarrays__function_guard result v1 v2 length) ) /\ ( (Calculator__naturalarray___axiom.dynamic_invariant result True False True True) /\ (forall k   "model" "name:k" "model_trace:3551"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k)) > (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k)))) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get result k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k)))) else (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get result k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k))))) )) ) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "smallernumberarrays" defined at calculator.ads:50, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__smallernumberarrays___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep
 use        Calculator__smallernumberarrays
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 val smallernumberarrays 
   (v1 : Array__Int__Standard__natural.map) (v2 : Array__Int__Standard__natural.map) (length : int) : Array__Int__Standard__natural.map
  requires {  ( ( ( ( (length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "name:x" "model_trace:3671"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 x)) > 0) )) ) /\ (forall x   "model" "name:x" "model_trace:3688"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 x)) > 0) )) ) }
  ensures {  ( ( (result = (Calculator__smallernumberarrays.smallernumberarrays v1 v2 length)) /\ (Calculator__smallernumberarrays.smallernumberarrays__function_guard result v1 v2 length) ) /\ ( (Calculator__naturalarray___axiom.dynamic_invariant result True False True True) /\ (forall k   "model" "name:k" "model_trace:3707"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k)) < (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k)))) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get result k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v1 k)))) else (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get result k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get v2 k))))) )) ) ) }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "calculator" defined at calculator.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Calculator__package_def
 use import "_gnatprove_standard".Main

 let def #"calculator.ads" 1 0 0#"GP_Subp:calculator.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"calculator.ads" 1 0 0# true }
  ensures { #"calculator.ads" 1 0 0# true }
   =
  ( (#"calculator.ads" 1 0 0# ());
  (#"calculator.ads" 3 0 0# ());
  (#"calculator.ads" 5 0 0# ());
  (#"calculator.ads" 15 0 0# ());
  (#"calculator.ads" 7 0 0# ());
  (#"calculator.ads" 21 0 0# ());
  (#"calculator.ads" 31 0 0# ());
  (#"calculator.ads" 23 0 0# ());
  (#"calculator.ads" 34 0 0# ());
  (#"calculator.ads" 44 0 0# ());
  (#"calculator.ads" 36 0 0# ());
  (#"calculator.ads" 50 0 0# ());
  (#"calculator.ads" 60 0 0# ());
  (#"calculator.ads" 52 0 0# ());
  (#"calculator.ads" 52 0 0# ());
  (#"calculator.ads" 52 0 0# ());
  (#"calculator.ads" 52 0 0# ());
  (#"calculator.ads" 52 0 0# ());
  (#"calculator.ads" 52 0 0# ());
  (#"calculator.ads" 52 0 0# ());
  (#"calculator.adb" 1 0 0# ());
  (#"calculator.adb" 3 0 0# ());
  (#"calculator.adb" 19 0 0# ());
  (#"calculator.adb" 35 0 0# ());
  (#"calculator.adb" 54 0 0# ());
  ( "GP_Sloc:calculator.adb:73:1" (#"calculator.adb" 73 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "multiplyarrays" defined at calculator.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__multiplyarrays__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__natural__rep
 use        Calculator__TnaturalarrayD1
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Calculator__multiplyarrays__v1
 use        Calculator__multiplyarrays__v2
 use        Calculator__multiplyarrays__length
 use        Array__Int__Standard__natural
 use        Calculator__multiplyarrays__result
 use        Calculator__multiplyarrays__index
 use        Calculator__multiplyarrays__L_1
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Calculator__multiplyarrays__result___axiom
 use        Calculator__multiplyarrays__index___axiom
 use        Calculator__multiplyarrays__L_1___axiom
 use        Calculator__naturalarray___axiom
 use        Calculator__multiplyarrays__v1___axiom
 use        Calculator__multiplyarrays__v2___axiom
 use        Calculator__multiplyarrays__length___axiom
 use        Calculator__TnaturalarrayD1___axiom

 val calculator__multiplyarrays__result "model_projected" "model_trace:3080@result" "name:multiplyArrays"  : Array__Int__Standard__natural.map__ref 
 
 let def #"calculator.ads" 5 0 0#"W:diverges:N" "GP_Subp:calculator.ads:5" 
   (__void_param : unit)
  requires { #"calculator.ads" 5 0 0# true }
  ensures { #"calculator.ads" 5 0 0# (#"calculator.ads" 15 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:calculator.ads:15:27" "GP_Reason:VC_POSTCONDITION" "GP_Id:20" "comment:                   post =>(for all k in multiplyArrays'Result'Range =>
                          ^ calculator.ads:15:27:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall k #"calculator.ads" 15 0 0#  "model" "model_trace:3222" "name:k"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (( ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) = 0) \/ ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k)) = 0) )) then (
    ( "GP_Pretty_Ada:3251" "GP_Sloc:calculator.ads:17:32" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content k)) = 0) )) else ((if (( ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k))) /\ ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k))) )) then (
    ( "GP_Pretty_Ada:3281" "GP_Sloc:calculator.ads:19:32" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content k)) = ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) * (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k)))) )) else (
    ( "GP_Pretty_Ada:4413" "GP_Sloc:calculator.ads:18:28" true ))))) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:5 *)
  ;
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__multiplyarrays__v1.v1 True False True True) };
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__multiplyarrays__v2.v2 True False True True) };
   assume {  (Standard__natural___axiom.dynamic_invariant Calculator__multiplyarrays__length.length True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:5 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:5 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.of_int(1))) ((Calculator__multiplyarrays__length.length > 0)))) ((1 < 10)))) ((1 < 10)))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (x)))) > 0)) then (
     ((#"calculator.ads" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:calculator.ads:13:77" "GP_Id:18" "comment:                   (for all x in v1'Range => (if v1(x) > 0 then Integer'Last/v1(x) >= v2(x))) and
                                                                            ^ calculator.ads:13:77:VC_DIVISION_CHECK" "GP_Shape:pragargs__and__and__forall__if__cmp__div" (Int_Division.div_(2147483647) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (x)))))) )) >= (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) (x)))))) else (
     (Boolean.of_int(1)))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "model_trace:3162" "name:x"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 x)) > 0)) then (
    ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 x))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 x)))) else (
    true)) )) )} 
  ) )))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) (x)))) > 0)) then (
     ((#"calculator.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:calculator.ads:14:77" "GP_Id:19" "comment:                   (for all x in v2'Range => (if v2(x) > 0 then Integer'Last/v2(x) >= v1(x))),
                                                                            ^ calculator.ads:14:77:VC_DIVISION_CHECK" "GP_Shape:pragargs__and__forall__if__cmp__div" (Int_Division.div_(2147483647) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) (x)))))) )) >= (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (x)))))) else (
     (Boolean.of_int(1)))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:x" "model_trace:3191"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 x)) > 0)) then (
    ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 x))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 x)))) else (
    true)) )) )} 
  ) ))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram calculator.ads:5 *)
  ;
   assume {  ( ( ( ( (Calculator__multiplyarrays__length.length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "model_trace:3162" "name:x"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 x)) > 0)) then (
    ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 x))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 x)))) else (
    true)) )) ) /\ (forall x   "model" "name:x" "model_trace:3191"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 x)) > 0)) then (
    ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 x))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 x)))) else (
    true)) )) ) };
   try
   ( (#"calculator.adb" 4 0 0# ( #"calculator.adb" 4 0 0# Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content <- ( Calculator__multiplyarrays__v1.v1 );
   #"calculator.adb" 4 0 0# assume { #"calculator.adb" 4 0 0# (Calculator__naturalarray___axiom.dynamic_invariant Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content True False True True) } ));
   (#"calculator.adb" 5 0 0# ( #"calculator.adb" 5 0 0# Calculator__multiplyarrays__index.index.int__content <- ( 1 );
   #"calculator.adb" 5 0 0# assume { #"calculator.adb" 5 0 0# (Standard__natural___axiom.dynamic_invariant Calculator__multiplyarrays__index.index.int__content True False True True) } ));
   (#"calculator.adb" 7 0 0# ());
   ( "GP_Sloc:calculator.adb:7:32" (#"calculator.adb" 7 0 0# ( () (* Translation of an Ada loop from calculator.adb:7 *)
   ;
   (if ((Calculator__multiplyarrays__index.index.int__content <= 10)) then (
    #"calculator.adb" 7 0 0# try
     ( #"calculator.adb" 7 0 0# abstract ensures {true}(let _ = Calculator__multiplyarrays__index.index.int__content in (
      ()))
      end ;
     (let temp___179 = #"calculator.adb" 7 0 0# (any int
     ensures {#"calculator.adb" 7 0 0# (result = Calculator__multiplyarrays__index.index.int__content)} 
     ) in (
      ( #"calculator.adb" 7 0 0# abstract ensures {true}(let _ = Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content in (
       ()))
       end ;
      (let temp___177 = #"calculator.adb" 7 0 0# (any Array__Int__Standard__natural.map
      ensures {#"calculator.adb" 7 0 0# (result = Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop calculator.adb:7 *)
       ;
       ( "GP_Sloc:calculator.adb:8:13" (#"calculator.adb" 8 0 0# ()) );
       ( "GP_Sloc:calculator.adb:8:20" (#"calculator.adb" 8 0 0# ()) );
       ( "GP_Sloc:calculator.adb:8:33" (#"calculator.adb" 8 0 0# ()) );
       ( "GP_Sloc:calculator.adb:8:43" (#"calculator.adb" 8 0 0# ()) );
       ( "GP_Sloc:calculator.adb:8:27" (#"calculator.adb" 8 0 0# #"calculator.adb" 8 0 0# Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 8 0 0# assert { #"calculator.adb" 8 0 0# (#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:20" "GP_Reason:VC_INDEX_CHECK" "GP_Id:4" "comment:            result(index) := v1(index)*v2(index);
                   ^ calculator.adb:8:20:VC_INDEX_CHECK" "GP_Shape:L_1_while__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__multiplyarrays__index.index.int__content) /\ (Calculator__multiplyarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__multiplyarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:39" "GP_Shape:L_1_while__result_assign__mult" "GP_Reason:VC_RANGE_CHECK" "GP_Id:3" "comment:            result(index) := v1(index)*v2(index);
                                      ^ calculator.adb:8:39:VC_RANGE_CHECK" (Standard__natural.range_check_((#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:39" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:2" "comment:            result(index) := v1(index)*v2(index);
                                      ^ calculator.adb:8:39:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__result_assign__mult" (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (( #"calculator.adb" 8 0 0# assert { #"calculator.adb" 8 0 0# (#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:33" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:            result(index) := v1(index)*v2(index);
                                ^ calculator.adb:8:33:VC_INDEX_CHECK" "GP_Shape:L_1_while__result_assign__mult__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__multiplyarrays__index.index.int__content) /\ (Calculator__multiplyarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__multiplyarrays__index.index.int__content ))))) * (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) ((  assert {  (#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:43" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__result_assign__mult__ixdcomp" "GP_Id:1" "comment:            result(index) := v1(index)*v2(index);
                                          ^ calculator.adb:8:43:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__multiplyarrays__index.index.int__content) /\ (Calculator__multiplyarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__multiplyarrays__index.index.int__content )))))))) )))) )))))) )) );
       ( "GP_Sloc:calculator.adb:9:13" (#"calculator.adb" 9 0 0# ()) );
       ( "GP_Sloc:calculator.adb:9:22" (#"calculator.adb" 9 0 0# ()) );
       ( "GP_Sloc:calculator.adb:9:19" (#"calculator.adb" 9 0 0# #"calculator.adb" 9 0 0# Calculator__multiplyarrays__index.index.int__content <- ( (#"calculator.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:9:28" "GP_Id:5" "comment:            index := index + 1;
                           ^ calculator.adb:9:28:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__index_assign__add" (Standard__integer.range_check_((Calculator__multiplyarrays__index.index.int__content + 1))) )) )) );
       () (* While loop translating the Ada loop from calculator.adb:7 *)
       ;
        while True do
        invariant { 
         (#"calculator.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:10:33" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:6" "comment:         pragma Loop_Invariant (index in v1'First .. v1'Last+1);
                                ^ calculator.adb:10:33:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__in" ( "GP_Pretty_Ada:2397" "GP_Sloc:calculator.adb:10:33" ( (1 <= Calculator__multiplyarrays__index.index.int__content) /\ (Calculator__multiplyarrays__index.index.int__content <= 11) ) ) ))
         }
        invariant { 
         (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:14:36" "GP_Id:14" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                   ^ calculator.adb:14:36:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall k #"calculator.adb" 14 0 0#  "model" "name:k" "model_trace:2410"  : int.
          ( ( (1 <= k) /\ (k <= (Calculator__multiplyarrays__index.index.int__content - 1)) ) -> (if (( ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) = 0) \/ ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k)) = 0) )) then (
           ( "GP_Pretty_Ada:2440" "GP_Sloc:calculator.adb:14:104" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content k)) = 0) )) else (
           ( "GP_Pretty_Ada:2445" "GP_Sloc:calculator.adb:14:123" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content k)) = ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) * (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k)))) ))) )) ))
         }
        ( () (* Assume implicit invariants from the loop calculator.adb:7 *)
        ;
         assume {  ( ( ( ( true /\ (Calculator__naturalarray___axiom.dynamic_invariant Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content False True True True) ) /\ true ) /\ (Standard__natural___axiom.dynamic_invariant Calculator__multiplyarrays__index.index.int__content False True True True) ) /\ true ) };
        () (* Check for absence of RTE in the invariant of loop calculator.adb:7 *)
        ;
         abstract ensures {true}(let _ = (Boolean.andb((1 <= Calculator__multiplyarrays__index.index.int__content)) ((Calculator__multiplyarrays__index.index.int__content <= 11))) in (
         ()))
         end ;
         abstract ensures {true}(let _ = ( (let k =  (any int
        ) in (
         (if ((Boolean.andb((1 <= k)) ((k <= (Calculator__multiplyarrays__index.index.int__content - 1))))) then (
           abstract ensures {true}(let _ = (if ((Boolean.orb(((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) ((  assert {  (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:14:79" "GP_Id:12" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                                                              ^ calculator.adb:14:79:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__or__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))) = 0)) (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) ((  assert {  (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__or__cmp__ixdcomp" "GP_Sloc:calculator.adb:14:92" "GP_Id:13" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                                                                           ^ calculator.adb:14:92:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))) = 0)))) then (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:14:111" "GP_Id:7" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                                                                                              ^ calculator.adb:14:111:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))) = 0)) else (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:14:130" "GP_Id:8" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                                                                                                                 ^ calculator.adb:14:130:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))) = (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:14:140" "GP_Id:11" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                                                                                                                           ^ calculator.adb:14:140:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__mult" (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (( #"calculator.adb" 14 0 0# assert { #"calculator.adb" 14 0 0# (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:14:138" "GP_Id:9" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                                                                                                                         ^ calculator.adb:14:138:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__mult__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))) * (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) ((  assert {  (#"calculator.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__mult__ixdcomp" "GP_Sloc:calculator.adb:14:144" "GP_Id:10" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) = 0 or v2(k) = 0 then result(k) = 0 else result(k) = v1(k)*v2(k)));
                                                                                                                                               ^ calculator.adb:14:144:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k )))))))) ))))) in (
           ()))
           end ))))
        ;
         (any bool
        requires { true} 
        ensures { ( (result = True) <-> (forall k   "model" "name:k" "model_trace:2410"  : int.
         ( ( (1 <= k) /\ (k <= (Calculator__multiplyarrays__index.index.int__content - 1)) ) -> (if (( ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) = 0) \/ ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k)) = 0) )) then (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content k)) = 0)) else (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content k)) = ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) * (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k)))))) )) )} 
        ) ) in (
         ()))
         end ;
        () (* Loop statements appearing after the loop invariant of loop calculator.adb:7 *)
        ;
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop calculator.adb:7 *)
        ;
        (if (not ( (Calculator__multiplyarrays__index.index.int__content <= 10) )) then (
          raise Calculator__multiplyarrays__L_1.L_1));
        ( "GP_Sloc:calculator.adb:8:13" (#"calculator.adb" 8 0 0# ()) );
        ( "GP_Sloc:calculator.adb:8:20" (#"calculator.adb" 8 0 0# ()) );
        ( "GP_Sloc:calculator.adb:8:33" (#"calculator.adb" 8 0 0# ()) );
        ( "GP_Sloc:calculator.adb:8:43" (#"calculator.adb" 8 0 0# ()) );
        ( "GP_Sloc:calculator.adb:8:27" (#"calculator.adb" 8 0 0# #"calculator.adb" 8 0 0# Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 8 0 0# assert { #"calculator.adb" 8 0 0# (#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:20" "GP_Reason:VC_INDEX_CHECK" "GP_Id:4" "comment:            result(index) := v1(index)*v2(index);
                   ^ calculator.adb:8:20:VC_INDEX_CHECK" "GP_Shape:L_1_while__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__multiplyarrays__index.index.int__content) /\ (Calculator__multiplyarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__multiplyarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:39" "GP_Shape:L_1_while__result_assign__mult" "GP_Reason:VC_RANGE_CHECK" "GP_Id:3" "comment:            result(index) := v1(index)*v2(index);
                                      ^ calculator.adb:8:39:VC_RANGE_CHECK" (Standard__natural.range_check_((#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:39" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:2" "comment:            result(index) := v1(index)*v2(index);
                                      ^ calculator.adb:8:39:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__result_assign__mult" (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (( #"calculator.adb" 8 0 0# assert { #"calculator.adb" 8 0 0# (#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:33" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:            result(index) := v1(index)*v2(index);
                                ^ calculator.adb:8:33:VC_INDEX_CHECK" "GP_Shape:L_1_while__result_assign__mult__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__multiplyarrays__index.index.int__content) /\ (Calculator__multiplyarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__multiplyarrays__index.index.int__content ))))) * (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) ((  assert {  (#"calculator.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.adb:8:43" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__result_assign__mult__ixdcomp" "GP_Id:1" "comment:            result(index) := v1(index)*v2(index);
                                          ^ calculator.adb:8:43:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__multiplyarrays__index.index.int__content) /\ (Calculator__multiplyarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__multiplyarrays__index.index.int__content )))))))) )))) )))))) )) );
        ( "GP_Sloc:calculator.adb:9:13" (#"calculator.adb" 9 0 0# ()) );
        ( "GP_Sloc:calculator.adb:9:22" (#"calculator.adb" 9 0 0# ()) );
        ( "GP_Sloc:calculator.adb:9:19" (#"calculator.adb" 9 0 0# #"calculator.adb" 9 0 0# Calculator__multiplyarrays__index.index.int__content <- ( (#"calculator.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:9:28" "GP_Id:5" "comment:            index := index + 1;
                           ^ calculator.adb:9:28:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__index_assign__add" (Standard__integer.range_check_((Calculator__multiplyarrays__index.index.int__content + 1))) )) )) ) )
       done )))
       )))
      )
    with
     Calculator__multiplyarrays__L_1.L_1 -> ()
    end)) )) );
   ( "GP_Sloc:calculator.adb:16:16" (#"calculator.adb" 16 0 0# ()) );
   ( "GP_Sloc:calculator.adb:16:9" (#"calculator.adb" 16 0 0# ( #"calculator.adb" 16 0 0# calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content <- ( Calculator__multiplyarrays__result.result__.Array__Int__Standard__natural.map__content );
   #"calculator.adb" 16 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let k =  (any int
  ) in (
   (if ((Boolean.andb((1 <= k)) ((k <= 10)))) then (
     abstract ensures {true}(let _ = (if ((Boolean.orb(((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (k)))) = 0)) (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) (k)))) = 0)))) then (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content) (k)))) = 0)) else ((if ((Boolean.andb(((#"calculator.ads" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:calculator.ads:18:46" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:16" "comment:                           elsif Integer'Last/v1(k) >= v2(k) and Integer'Last/v2(k) >= v1(k) then
                                             ^ calculator.ads:18:46:VC_DIVISION_CHECK" "GP_Shape:pragargs__forall__if__if__and__cmp__div" (Int_Division.div_(2147483647) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (k)))))) )) >= (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) (k)))))) (((#"calculator.ads" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:pragargs__forall__if__if__and__cmp__div" "GP_Sloc:calculator.ads:18:78" "GP_Id:17" "comment:                           elsif Integer'Last/v1(k) >= v2(k) and Integer'Last/v2(k) >= v1(k) then
                                                                             ^ calculator.ads:18:78:VC_DIVISION_CHECK" (Int_Division.div_(2147483647) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) (k)))))) )) >= (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (k)))))))) then (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content) (k)))) = (#"calculator.ads" 19 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.ads:19:64" "GP_Id:15" "comment:                    	       multiplyArrays'Result(k) = v1(k)*v2(k)));
                                                               ^ calculator.ads:19:64:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__if__if__cmp__mult" (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v1.v1) (k)))) * (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__multiplyarrays__v2.v2) (k))))))) )))) else (
     (Boolean.of_int(1)))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall k   "model" "model_trace:3222" "name:k"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (( ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) = 0) \/ ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k)) = 0) )) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content k)) = 0)) else ((if (( ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k))) /\ ((Int_Division.div 2147483647 (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k))) >= (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k))) )) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content k)) = ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v1.v1 k)) * (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__multiplyarrays__v2.v2 k))))) else (
    true)))) )) )} 
  ) ) in (
   ()))
   end ;
  calculator__multiplyarrays__result.Array__Int__Standard__natural.map__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "dividearrays" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__dividearrays__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__natural__rep
 use        Calculator__TnaturalarrayD1
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Calculator__dividearrays__v1
 use        Calculator__dividearrays__v2
 use        Calculator__dividearrays__length
 use        Array__Int__Standard__natural
 use        Calculator__dividearrays__result
 use        Calculator__dividearrays__index
 use        Calculator__dividearrays__L_2
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Calculator__dividearrays__result___axiom
 use        Calculator__dividearrays__index___axiom
 use        Calculator__dividearrays__L_2___axiom
 use        Calculator__naturalarray___axiom
 use        Calculator__dividearrays__v1___axiom
 use        Calculator__dividearrays__v2___axiom
 use        Calculator__dividearrays__length___axiom
 use        Calculator__TnaturalarrayD1___axiom

 val calculator__dividearrays__result "model_projected" "model_trace:3290@result" "name:divideArrays"  : Array__Int__Standard__natural.map__ref 
 
 let def #"calculator.ads" 21 0 0#"W:diverges:N" "GP_Subp:calculator.ads:21" 
   (__void_param : unit)
  requires { #"calculator.ads" 21 0 0# true }
  ensures { #"calculator.ads" 21 0 0# (#"calculator.ads" 31 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:calculator.ads:31:27" "GP_Id:34" "comment:                   post =>(for all k in divideArrays'Result'Range =>
                          ^ calculator.ads:31:27:VC_POSTCONDITION" (forall k #"calculator.ads" 31 0 0#  "model" "name:k" "model_trace:3408"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> ( "GP_Pretty_Ada:3426" "GP_Sloc:calculator.ads:32:32" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__dividearrays__result.Array__Int__Standard__natural.map__content k)) = (Int_Division.div (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v1.v1 k)) (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v2.v2 k)))) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:21 *)
  ;
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__dividearrays__v1.v1 True False True True) };
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__dividearrays__v2.v2 True False True True) };
   assume {  (Standard__natural___axiom.dynamic_invariant Calculator__dividearrays__length.length True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:21 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.of_int(1))) ((Calculator__dividearrays__length.length > 0)))) ((1 < 10)))) ((1 < 10)))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v1.v1) (x)))) > 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:x" "model_trace:3372"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v1.v1 x)) > 0) )) )} 
  ) )))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v2.v2) (x)))) > 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:x" "model_trace:3389"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v2.v2 x)) > 0) )) )} 
  ) ))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram calculator.ads:21 *)
  ;
   assume {  ( ( ( ( (Calculator__dividearrays__length.length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "name:x" "model_trace:3372"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v1.v1 x)) > 0) )) ) /\ (forall x   "model" "name:x" "model_trace:3389"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v2.v2 x)) > 0) )) ) };
   try
   ( (#"calculator.adb" 20 0 0# ( #"calculator.adb" 20 0 0# Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content <- ( Calculator__dividearrays__v1.v1 );
   #"calculator.adb" 20 0 0# assume { #"calculator.adb" 20 0 0# (Calculator__naturalarray___axiom.dynamic_invariant Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content True False True True) } ));
   (#"calculator.adb" 21 0 0# ( #"calculator.adb" 21 0 0# Calculator__dividearrays__index.index.int__content <- ( 1 );
   #"calculator.adb" 21 0 0# assume { #"calculator.adb" 21 0 0# (Standard__natural___axiom.dynamic_invariant Calculator__dividearrays__index.index.int__content True False True True) } ));
   (#"calculator.adb" 23 0 0# ());
   ( "GP_Sloc:calculator.adb:23:32" (#"calculator.adb" 23 0 0# ( () (* Translation of an Ada loop from calculator.adb:23 *)
   ;
   (if ((Calculator__dividearrays__index.index.int__content <= 10)) then (
    #"calculator.adb" 23 0 0# try
     ( #"calculator.adb" 23 0 0# abstract ensures {true}(let _ = Calculator__dividearrays__index.index.int__content in (
      ()))
      end ;
     (let temp___185 = #"calculator.adb" 23 0 0# (any int
     ensures {#"calculator.adb" 23 0 0# (result = Calculator__dividearrays__index.index.int__content)} 
     ) in (
      ( #"calculator.adb" 23 0 0# abstract ensures {true}(let _ = Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content in (
       ()))
       end ;
      (let temp___183 = #"calculator.adb" 23 0 0# (any Array__Int__Standard__natural.map
      ensures {#"calculator.adb" 23 0 0# (result = Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop calculator.adb:23 *)
       ;
       ( "GP_Sloc:calculator.adb:24:13" (#"calculator.adb" 24 0 0# ()) );
       ( "GP_Sloc:calculator.adb:24:20" (#"calculator.adb" 24 0 0# ()) );
       ( "GP_Sloc:calculator.adb:24:33" (#"calculator.adb" 24 0 0# ()) );
       ( "GP_Sloc:calculator.adb:24:43" (#"calculator.adb" 24 0 0# ()) );
       ( "GP_Sloc:calculator.adb:24:27" (#"calculator.adb" 24 0 0# #"calculator.adb" 24 0 0# Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 24 0 0# assert { #"calculator.adb" 24 0 0# (#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:24:20" "GP_Id:25" "comment:            result(index) := v1(index)/v2(index);
                   ^ calculator.adb:24:20:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__dividearrays__index.index.int__content) /\ (Calculator__dividearrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__dividearrays__index.index.int__content )) ((Standard__natural__rep.of_rep((#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:calculator.adb:24:39" "GP_Shape:L_2_while__result_assign__div" "GP_Id:24" "comment:            result(index) := v1(index)/v2(index);
                                      ^ calculator.adb:24:39:VC_RANGE_CHECK" (Standard__natural.range_check_((#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:calculator.adb:24:39" "GP_Id:23" "comment:            result(index) := v1(index)/v2(index);
                                      ^ calculator.adb:24:39:VC_DIVISION_CHECK" "GP_Shape:L_2_while__result_assign__div" (Int_Division.div_((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v1.v1) (( #"calculator.adb" 24 0 0# assert { #"calculator.adb" 24 0 0# (#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:24:33" "GP_Id:21" "comment:            result(index) := v1(index)/v2(index);
                                ^ calculator.adb:24:33:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__div__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__dividearrays__index.index.int__content) /\ (Calculator__dividearrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__dividearrays__index.index.int__content )))))) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v2.v2) ((  assert {  (#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:24:43" "GP_Shape:L_2_while__result_assign__div__ixdcomp" "GP_Id:22" "comment:            result(index) := v1(index)/v2(index);
                                          ^ calculator.adb:24:43:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__dividearrays__index.index.int__content) /\ (Calculator__dividearrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__dividearrays__index.index.int__content ))))))) )))) )))))) )) );
       ( "GP_Sloc:calculator.adb:25:13" (#"calculator.adb" 25 0 0# ()) );
       ( "GP_Sloc:calculator.adb:25:22" (#"calculator.adb" 25 0 0# ()) );
       ( "GP_Sloc:calculator.adb:25:19" (#"calculator.adb" 25 0 0# #"calculator.adb" 25 0 0# Calculator__dividearrays__index.index.int__content <- ( (#"calculator.adb" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:25:28" "GP_Id:26" "comment:            index := index + 1;
                           ^ calculator.adb:25:28:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__index_assign__add" (Standard__integer.range_check_((Calculator__dividearrays__index.index.int__content + 1))) )) )) );
       () (* While loop translating the Ada loop from calculator.adb:23 *)
       ;
        while True do
        invariant { 
         (#"calculator.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:26:33" "GP_Id:27" "comment:         pragma Loop_Invariant (index in v1'First .. v1'Last+1);
                                ^ calculator.adb:26:33:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__in" ( "GP_Pretty_Ada:2547" "GP_Sloc:calculator.adb:26:33" ( (1 <= Calculator__dividearrays__index.index.int__content) /\ (Calculator__dividearrays__index.index.int__content <= 11) ) ) ))
         }
        invariant { 
         (#"calculator.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:30:36" "GP_Id:32" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (result(k) = v1(k)/v2(k)));
                                   ^ calculator.adb:30:36:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" (forall k #"calculator.adb" 30 0 0#  "model" "name:k" "model_trace:2560"  : int.
          ( ( (1 <= k) /\ (k <= (Calculator__dividearrays__index.index.int__content - 1)) ) -> ( "GP_Pretty_Ada:2579" "GP_Sloc:calculator.adb:30:72" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Int_Division.div (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v1.v1 k)) (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v2.v2 k)))) ) )) ))
         }
        ( () (* Assume implicit invariants from the loop calculator.adb:23 *)
        ;
         assume {  ( ( ( ( true /\ (Calculator__naturalarray___axiom.dynamic_invariant Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content False True True True) ) /\ true ) /\ (Standard__natural___axiom.dynamic_invariant Calculator__dividearrays__index.index.int__content False True True True) ) /\ true ) };
        () (* Check for absence of RTE in the invariant of loop calculator.adb:23 *)
        ;
         abstract ensures {true}(let _ = (Boolean.andb((1 <= Calculator__dividearrays__index.index.int__content)) ((Calculator__dividearrays__index.index.int__content <= 11))) in (
         ()))
         end ;
         abstract ensures {true}(let _ = ( (let k =  (any int
        ) in (
         (if ((Boolean.andb((1 <= k)) ((k <= (Calculator__dividearrays__index.index.int__content - 1))))) then (
           abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"calculator.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:30:80" "GP_Id:28" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (result(k) = v1(k)/v2(k)));
                                                                               ^ calculator.adb:30:80:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))) = (#"calculator.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:calculator.adb:30:90" "GP_Id:31" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (result(k) = v1(k)/v2(k)));
                                                                                         ^ calculator.adb:30:90:VC_DIVISION_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__div" (Int_Division.div_((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v1.v1) (( #"calculator.adb" 30 0 0# assert { #"calculator.adb" 30 0 0# (#"calculator.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:30:88" "GP_Id:29" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (result(k) = v1(k)/v2(k)));
                                                                                       ^ calculator.adb:30:88:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__div__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k )))))) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v2.v2) ((  assert {  (#"calculator.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__div__ixdcomp" "GP_Sloc:calculator.adb:30:94" "GP_Id:30" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (result(k) = v1(k)/v2(k)));
                                                                                             ^ calculator.adb:30:94:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))))) ))) in (
           ()))
           end ))))
        ;
         (any bool
        requires { true} 
        ensures { ( (result = True) <-> (forall k   "model" "name:k" "model_trace:2560"  : int.
         ( ( (1 <= k) /\ (k <= (Calculator__dividearrays__index.index.int__content - 1)) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Int_Division.div (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v1.v1 k)) (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v2.v2 k)))) )) )} 
        ) ) in (
         ()))
         end ;
        () (* Loop statements appearing after the loop invariant of loop calculator.adb:23 *)
        ;
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop calculator.adb:23 *)
        ;
        (if (not ( (Calculator__dividearrays__index.index.int__content <= 10) )) then (
          raise Calculator__dividearrays__L_2.L_2));
        ( "GP_Sloc:calculator.adb:24:13" (#"calculator.adb" 24 0 0# ()) );
        ( "GP_Sloc:calculator.adb:24:20" (#"calculator.adb" 24 0 0# ()) );
        ( "GP_Sloc:calculator.adb:24:33" (#"calculator.adb" 24 0 0# ()) );
        ( "GP_Sloc:calculator.adb:24:43" (#"calculator.adb" 24 0 0# ()) );
        ( "GP_Sloc:calculator.adb:24:27" (#"calculator.adb" 24 0 0# #"calculator.adb" 24 0 0# Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 24 0 0# assert { #"calculator.adb" 24 0 0# (#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:24:20" "GP_Id:25" "comment:            result(index) := v1(index)/v2(index);
                   ^ calculator.adb:24:20:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__dividearrays__index.index.int__content) /\ (Calculator__dividearrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__dividearrays__index.index.int__content )) ((Standard__natural__rep.of_rep((#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:calculator.adb:24:39" "GP_Shape:L_2_while__result_assign__div" "GP_Id:24" "comment:            result(index) := v1(index)/v2(index);
                                      ^ calculator.adb:24:39:VC_RANGE_CHECK" (Standard__natural.range_check_((#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:calculator.adb:24:39" "GP_Id:23" "comment:            result(index) := v1(index)/v2(index);
                                      ^ calculator.adb:24:39:VC_DIVISION_CHECK" "GP_Shape:L_2_while__result_assign__div" (Int_Division.div_((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v1.v1) (( #"calculator.adb" 24 0 0# assert { #"calculator.adb" 24 0 0# (#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:24:33" "GP_Id:21" "comment:            result(index) := v1(index)/v2(index);
                                ^ calculator.adb:24:33:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__div__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__dividearrays__index.index.int__content) /\ (Calculator__dividearrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__dividearrays__index.index.int__content )))))) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v2.v2) ((  assert {  (#"calculator.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:24:43" "GP_Shape:L_2_while__result_assign__div__ixdcomp" "GP_Id:22" "comment:            result(index) := v1(index)/v2(index);
                                          ^ calculator.adb:24:43:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__dividearrays__index.index.int__content) /\ (Calculator__dividearrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__dividearrays__index.index.int__content ))))))) )))) )))))) )) );
        ( "GP_Sloc:calculator.adb:25:13" (#"calculator.adb" 25 0 0# ()) );
        ( "GP_Sloc:calculator.adb:25:22" (#"calculator.adb" 25 0 0# ()) );
        ( "GP_Sloc:calculator.adb:25:19" (#"calculator.adb" 25 0 0# #"calculator.adb" 25 0 0# Calculator__dividearrays__index.index.int__content <- ( (#"calculator.adb" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:25:28" "GP_Id:26" "comment:            index := index + 1;
                           ^ calculator.adb:25:28:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__index_assign__add" (Standard__integer.range_check_((Calculator__dividearrays__index.index.int__content + 1))) )) )) ) )
       done )))
       )))
      )
    with
     Calculator__dividearrays__L_2.L_2 -> ()
    end)) )) );
   ( "GP_Sloc:calculator.adb:32:16" (#"calculator.adb" 32 0 0# ()) );
   ( "GP_Sloc:calculator.adb:32:9" (#"calculator.adb" 32 0 0# ( #"calculator.adb" 32 0 0# calculator__dividearrays__result.Array__Int__Standard__natural.map__content <- ( Calculator__dividearrays__result.result__.Array__Int__Standard__natural.map__content );
   #"calculator.adb" 32 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let k =  (any int
  ) in (
   (if ((Boolean.andb((1 <= k)) ((k <= 10)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(calculator__dividearrays__result.Array__Int__Standard__natural.map__content) (k)))) = (#"calculator.ads" 32 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:calculator.ads:32:63" "GP_Id:33" "comment:                    	       (divideArrays'Result(k) = v1(k)/v2(k)));
                                                              ^ calculator.ads:32:63:VC_DIVISION_CHECK" "GP_Shape:pragargs__forall__cmp__div" (Int_Division.div_((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v1.v1) (k))))) ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__dividearrays__v2.v2) (k)))))) ))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall k   "model" "name:k" "model_trace:3408"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__dividearrays__result.Array__Int__Standard__natural.map__content k)) = (Int_Division.div (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v1.v1 k)) (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__dividearrays__v2.v2 k)))) )) )} 
  ) ) in (
   ()))
   end ;
  calculator__dividearrays__result.Array__Int__Standard__natural.map__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "biggernumberarrays" defined at calculator.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__biggernumberarrays__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__natural__rep
 use        Calculator__TnaturalarrayD1
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Calculator__biggernumberarrays__v1
 use        Calculator__biggernumberarrays__v2
 use        Calculator__biggernumberarrays__length
 use        Array__Int__Standard__natural
 use        Calculator__biggernumberarrays__result
 use        Calculator__biggernumberarrays__index
 use        Calculator__biggernumberarrays__L_3
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Calculator__biggernumberarrays__result___axiom
 use        Calculator__biggernumberarrays__index___axiom
 use        Calculator__biggernumberarrays__L_3___axiom
 use        Calculator__naturalarray___axiom
 use        Calculator__biggernumberarrays__v1___axiom
 use        Calculator__biggernumberarrays__v2___axiom
 use        Calculator__biggernumberarrays__length___axiom
 use        Calculator__TnaturalarrayD1___axiom

 val calculator__biggernumberarrays__result "model_projected" "model_trace:3433@result" "name:biggerNumberArrays"  : Array__Int__Standard__natural.map__ref 
 
 let def #"calculator.ads" 34 0 0#"W:diverges:N" "GP_Subp:calculator.ads:34" 
   (__void_param : unit)
  requires { #"calculator.ads" 34 0 0# true }
  ensures { #"calculator.ads" 34 0 0# (#"calculator.ads" 44 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:calculator.ads:44:27" "GP_Id:52" "comment:                   post =>(for all k in biggerNumberArrays'Result'Range =>
                          ^ calculator.ads:44:27:VC_POSTCONDITION" (forall k #"calculator.ads" 44 0 0#  "model" "name:k" "model_trace:3551"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k)) > (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k)))) then (
    ( "GP_Pretty_Ada:3576" "GP_Sloc:calculator.ads:46:32" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k))) )) else (
    ( "GP_Pretty_Ada:3585" "GP_Sloc:calculator.ads:48:32" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k))) ))) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:34 *)
  ;
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__biggernumberarrays__v1.v1 True False True True) };
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__biggernumberarrays__v2.v2 True False True True) };
   assume {  (Standard__natural___axiom.dynamic_invariant Calculator__biggernumberarrays__length.length True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:34 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:34 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.of_int(1))) ((Calculator__biggernumberarrays__length.length > 0)))) ((1 < 10)))) ((1 < 10)))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) (x)))) > 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:x" "model_trace:3515"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 x)) > 0) )) )} 
  ) )))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) (x)))) > 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:x" "model_trace:3532"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 x)) > 0) )) )} 
  ) ))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram calculator.ads:34 *)
  ;
   assume {  ( ( ( ( (Calculator__biggernumberarrays__length.length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "name:x" "model_trace:3515"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 x)) > 0) )) ) /\ (forall x   "model" "name:x" "model_trace:3532"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 x)) > 0) )) ) };
   try
   ( (#"calculator.adb" 36 0 0# ( #"calculator.adb" 36 0 0# Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( Calculator__biggernumberarrays__v1.v1 );
   #"calculator.adb" 36 0 0# assume { #"calculator.adb" 36 0 0# (Calculator__naturalarray___axiom.dynamic_invariant Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content True False True True) } ));
   (#"calculator.adb" 37 0 0# ( #"calculator.adb" 37 0 0# Calculator__biggernumberarrays__index.index.int__content <- ( 1 );
   #"calculator.adb" 37 0 0# assume { #"calculator.adb" 37 0 0# (Standard__natural___axiom.dynamic_invariant Calculator__biggernumberarrays__index.index.int__content True False True True) } ));
   (#"calculator.adb" 39 0 0# ());
   ( "GP_Sloc:calculator.adb:39:32" (#"calculator.adb" 39 0 0# ( () (* Translation of an Ada loop from calculator.adb:39 *)
   ;
   (if ((Calculator__biggernumberarrays__index.index.int__content <= 10)) then (
    #"calculator.adb" 39 0 0# try
     ( #"calculator.adb" 39 0 0# abstract ensures {true}(let _ = Calculator__biggernumberarrays__index.index.int__content in (
      ()))
      end ;
     (let temp___191 = #"calculator.adb" 39 0 0# (any int
     ensures {#"calculator.adb" 39 0 0# (result = Calculator__biggernumberarrays__index.index.int__content)} 
     ) in (
      ( #"calculator.adb" 39 0 0# abstract ensures {true}(let _ = Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content in (
       ()))
       end ;
      (let temp___189 = #"calculator.adb" 39 0 0# (any Array__Int__Standard__natural.map
      ensures {#"calculator.adb" 39 0 0# (result = Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop calculator.adb:39 *)
       ;
       ( "GP_Sloc:calculator.adb:40:19" (#"calculator.adb" 40 0 0# ()) );
       ( "GP_Sloc:calculator.adb:40:31" (#"calculator.adb" 40 0 0# ()) );
       ( "GP_Sloc:calculator.adb:40:13" (#"calculator.adb" 40 0 0# (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) (( #"calculator.adb" 40 0 0# assert { #"calculator.adb" 40 0 0# (#"calculator.adb" 40 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:40:19" "GP_Id:39" "comment:            if v1(index) > v2(index) then
                  ^ calculator.adb:40:19:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__biggernumberarrays__index.index.int__content ))))) > (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 40 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:40:31" "GP_Shape:L_3_while__if__cmp__ixdcomp" "GP_Id:40" "comment:            if v1(index) > v2(index) then
                              ^ calculator.adb:40:31:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__biggernumberarrays__index.index.int__content ))))))) then (
        ( ( "GP_Sloc:calculator.adb:41:17" (#"calculator.adb" 41 0 0# ()) );
        ( "GP_Sloc:calculator.adb:41:24" (#"calculator.adb" 41 0 0# ()) );
        ( "GP_Sloc:calculator.adb:41:37" (#"calculator.adb" 41 0 0# ()) );
        ( "GP_Sloc:calculator.adb:41:31" (#"calculator.adb" 41 0 0# #"calculator.adb" 41 0 0# Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 41 0 0# assert { #"calculator.adb" 41 0 0# (#"calculator.adb" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:41:24" "GP_Id:38" "comment:                result(index) := v1(index);
                       ^ calculator.adb:41:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__biggernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:41:37" "GP_Id:37" "comment:                result(index) := v1(index);
                                    ^ calculator.adb:41:37:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__biggernumberarrays__index.index.int__content ))))))))) )) ) )) else (
        ( ( "GP_Sloc:calculator.adb:43:17" (#"calculator.adb" 43 0 0# ()) );
        ( "GP_Sloc:calculator.adb:43:24" (#"calculator.adb" 43 0 0# ()) );
        ( "GP_Sloc:calculator.adb:43:37" (#"calculator.adb" 43 0 0# ()) );
        ( "GP_Sloc:calculator.adb:43:31" (#"calculator.adb" 43 0 0# #"calculator.adb" 43 0 0# Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 43 0 0# assert { #"calculator.adb" 43 0 0# (#"calculator.adb" 43 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:43:24" "GP_Shape:L_3_while__if__result_assign__ixdcomp" "GP_Id:36" "comment:                result(index) := v2(index);
                       ^ calculator.adb:43:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__biggernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 43 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:43:37" "GP_Id:35" "comment:                result(index) := v2(index);
                                    ^ calculator.adb:43:37:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__biggernumberarrays__index.index.int__content ))))))))) )) ) )))) );
       ( "GP_Sloc:calculator.adb:45:13" (#"calculator.adb" 45 0 0# ()) );
       ( "GP_Sloc:calculator.adb:45:22" (#"calculator.adb" 45 0 0# ()) );
       ( "GP_Sloc:calculator.adb:45:19" (#"calculator.adb" 45 0 0# #"calculator.adb" 45 0 0# Calculator__biggernumberarrays__index.index.int__content <- ( (#"calculator.adb" 45 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:45:28" "GP_Id:41" "comment:            index := index + 1;
                           ^ calculator.adb:45:28:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__index_assign__add" (Standard__integer.range_check_((Calculator__biggernumberarrays__index.index.int__content + 1))) )) )) );
       () (* While loop translating the Ada loop from calculator.adb:39 *)
       ;
        while True do
        invariant { 
         (#"calculator.adb" 46 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:46:36" "GP_Id:42" "comment:            pragma Loop_Invariant (index in v1'First .. v1'Last+1);
                                   ^ calculator.adb:46:36:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__in" ( "GP_Pretty_Ada:2691" "GP_Sloc:calculator.adb:46:36" ( (1 <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= 11) ) ) ))
         }
        invariant { 
         (#"calculator.adb" 47 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:47:36" "GP_Id:43" "comment:            pragma Loop_Invariant (v1'First = result'First and v2'First = result'First and v1'First = v2'First);
                                   ^ calculator.adb:47:36:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs" ( "GP_Pretty_Ada:2720" "GP_Sloc:calculator.adb:47:36" true ) ))
         }
        invariant { 
         (#"calculator.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs" "GP_Sloc:calculator.adb:48:36" "GP_Id:44" "comment:            pragma Loop_Invariant (v1'Last = result'Last and v2'Last = result'Last and v1'Last = v2'Last);
                                   ^ calculator.adb:48:36:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2747" "GP_Sloc:calculator.adb:48:36" true ) ))
         }
        invariant { 
         (#"calculator.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:49:36" "GP_Id:51" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) > v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                   ^ calculator.adb:49:36:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" (forall k #"calculator.adb" 49 0 0#  "model" "name:k" "model_trace:2758"  : int.
          ( ( (1 <= k) /\ (k <= (Calculator__biggernumberarrays__index.index.int__content - 1)) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k)) > (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k)))) then (
           ( "GP_Pretty_Ada:2784" "GP_Sloc:calculator.adb:49:95" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k))) )) else (
           ( "GP_Pretty_Ada:2791" "GP_Sloc:calculator.adb:49:118" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k))) ))) )) ))
         }
        ( () (* Assume implicit invariants from the loop calculator.adb:39 *)
        ;
         assume {  ( ( ( ( true /\ (Calculator__naturalarray___axiom.dynamic_invariant Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content False True True True) ) /\ (forall temp___190   : int.
         (if (( (Calculator__TnaturalarrayD1.first <= temp___190) /\ (temp___190 <= Calculator__TnaturalarrayD1.last) )) then (
          (if (( false /\ false )) then (
           ((Array__Int__Standard__natural.get Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content temp___190) = (Array__Int__Standard__natural.get temp___189 temp___190))) else (
           true))) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant Calculator__biggernumberarrays__index.index.int__content False True True True) ) /\ true ) };
        () (* Check for absence of RTE in the invariant of loop calculator.adb:39 *)
        ;
         abstract ensures {true}(let _ = (Boolean.andb((1 <= Calculator__biggernumberarrays__index.index.int__content)) ((Calculator__biggernumberarrays__index.index.int__content <= 11))) in (
         ()))
         end ;
         abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
         ()))
         end ;
         abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
         ()))
         end ;
         abstract ensures {true}(let _ = ( (let k =  (any int
        ) in (
         (if ((Boolean.andb((1 <= k)) ((k <= (Calculator__biggernumberarrays__index.index.int__content - 1))))) then (
           abstract ensures {true}(let _ = (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:49:79" "GP_Id:49" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) > v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                              ^ calculator.adb:49:79:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))) > (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:49:87" "GP_Id:50" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) > v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                      ^ calculator.adb:49:87:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))))) then (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"calculator.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:49:102" "GP_Id:45" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) > v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                     ^ calculator.adb:49:102:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:49:110" "GP_Id:46" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) > v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                             ^ calculator.adb:49:110:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))))) else (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"calculator.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:49:125" "GP_Id:47" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) > v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                                            ^ calculator.adb:49:125:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:49:133" "GP_Id:48" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) > v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                                                    ^ calculator.adb:49:133:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k )))))))) in (
           ()))
           end ))))
        ;
         (any bool
        requires { true} 
        ensures { ( (result = True) <-> (forall k   "model" "name:k" "model_trace:2758"  : int.
         ( ( (1 <= k) /\ (k <= (Calculator__biggernumberarrays__index.index.int__content - 1)) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k)) > (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k)))) then (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k)))) else (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k))))) )) )} 
        ) ) in (
         ()))
         end ;
        () (* Loop statements appearing after the loop invariant of loop calculator.adb:39 *)
        ;
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop calculator.adb:39 *)
        ;
        (if (not ( (Calculator__biggernumberarrays__index.index.int__content <= 10) )) then (
          raise Calculator__biggernumberarrays__L_3.L_3));
        ( "GP_Sloc:calculator.adb:40:19" (#"calculator.adb" 40 0 0# ()) );
        ( "GP_Sloc:calculator.adb:40:31" (#"calculator.adb" 40 0 0# ()) );
        ( "GP_Sloc:calculator.adb:40:13" (#"calculator.adb" 40 0 0# (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) (( #"calculator.adb" 40 0 0# assert { #"calculator.adb" 40 0 0# (#"calculator.adb" 40 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:40:19" "GP_Id:39" "comment:            if v1(index) > v2(index) then
                  ^ calculator.adb:40:19:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__biggernumberarrays__index.index.int__content ))))) > (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 40 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:40:31" "GP_Shape:L_3_while__if__cmp__ixdcomp" "GP_Id:40" "comment:            if v1(index) > v2(index) then
                              ^ calculator.adb:40:31:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__biggernumberarrays__index.index.int__content ))))))) then (
         ( ( "GP_Sloc:calculator.adb:41:17" (#"calculator.adb" 41 0 0# ()) );
         ( "GP_Sloc:calculator.adb:41:24" (#"calculator.adb" 41 0 0# ()) );
         ( "GP_Sloc:calculator.adb:41:37" (#"calculator.adb" 41 0 0# ()) );
         ( "GP_Sloc:calculator.adb:41:31" (#"calculator.adb" 41 0 0# #"calculator.adb" 41 0 0# Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 41 0 0# assert { #"calculator.adb" 41 0 0# (#"calculator.adb" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:41:24" "GP_Id:38" "comment:                result(index) := v1(index);
                       ^ calculator.adb:41:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__biggernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:41:37" "GP_Id:37" "comment:                result(index) := v1(index);
                                    ^ calculator.adb:41:37:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__biggernumberarrays__index.index.int__content ))))))))) )) ) )) else (
         ( ( "GP_Sloc:calculator.adb:43:17" (#"calculator.adb" 43 0 0# ()) );
         ( "GP_Sloc:calculator.adb:43:24" (#"calculator.adb" 43 0 0# ()) );
         ( "GP_Sloc:calculator.adb:43:37" (#"calculator.adb" 43 0 0# ()) );
         ( "GP_Sloc:calculator.adb:43:31" (#"calculator.adb" 43 0 0# #"calculator.adb" 43 0 0# Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 43 0 0# assert { #"calculator.adb" 43 0 0# (#"calculator.adb" 43 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:43:24" "GP_Shape:L_3_while__if__result_assign__ixdcomp" "GP_Id:36" "comment:                result(index) := v2(index);
                       ^ calculator.adb:43:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__biggernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 43 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:43:37" "GP_Id:35" "comment:                result(index) := v2(index);
                                    ^ calculator.adb:43:37:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__biggernumberarrays__index.index.int__content) /\ (Calculator__biggernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__biggernumberarrays__index.index.int__content ))))))))) )) ) )))) );
        ( "GP_Sloc:calculator.adb:45:13" (#"calculator.adb" 45 0 0# ()) );
        ( "GP_Sloc:calculator.adb:45:22" (#"calculator.adb" 45 0 0# ()) );
        ( "GP_Sloc:calculator.adb:45:19" (#"calculator.adb" 45 0 0# #"calculator.adb" 45 0 0# Calculator__biggernumberarrays__index.index.int__content <- ( (#"calculator.adb" 45 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:45:28" "GP_Id:41" "comment:            index := index + 1;
                           ^ calculator.adb:45:28:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__index_assign__add" (Standard__integer.range_check_((Calculator__biggernumberarrays__index.index.int__content + 1))) )) )) ) )
       done )))
       )))
      )
    with
     Calculator__biggernumberarrays__L_3.L_3 -> ()
    end)) )) );
   ( "GP_Sloc:calculator.adb:51:16" (#"calculator.adb" 51 0 0# ()) );
   ( "GP_Sloc:calculator.adb:51:9" (#"calculator.adb" 51 0 0# ( #"calculator.adb" 51 0 0# calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content <- ( Calculator__biggernumberarrays__result.result__.Array__Int__Standard__natural.map__content );
   #"calculator.adb" 51 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let k =  (any int
  ) in (
   (if ((Boolean.andb((1 <= k)) ((k <= 10)))) then (
     abstract ensures {true}(let _ = (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) (k)))) > (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) (k)))))) then (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content) (k)))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v1.v1) (k)))))) else (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content) (k)))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__biggernumberarrays__v2.v2) (k))))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall k   "model" "name:k" "model_trace:3551"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k)) > (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k)))) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v1.v1 k)))) else (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__biggernumberarrays__v2.v2 k))))) )) )} 
  ) ) in (
   ()))
   end ;
  calculator__biggernumberarrays__result.Array__Int__Standard__natural.map__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "smallernumberarrays" defined at calculator.ads:50, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__smallernumberarrays__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__natural__rep
 use        Calculator__TnaturalarrayD1
 use        Array__Int__Standard__natural
 use        Calculator__naturalarray___axiom
 use        Calculator__smallernumberarrays__v1
 use        Calculator__smallernumberarrays__v2
 use        Calculator__smallernumberarrays__length
 use        Array__Int__Standard__natural
 use        Calculator__smallernumberarrays__result
 use        Calculator__smallernumberarrays__index
 use        Calculator__smallernumberarrays__L_4
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Calculator__smallernumberarrays__result___axiom
 use        Calculator__smallernumberarrays__index___axiom
 use        Calculator__smallernumberarrays__L_4___axiom
 use        Calculator__naturalarray___axiom
 use        Calculator__smallernumberarrays__v1___axiom
 use        Calculator__smallernumberarrays__v2___axiom
 use        Calculator__smallernumberarrays__length___axiom
 use        Calculator__TnaturalarrayD1___axiom

 val calculator__smallernumberarrays__result "model_projected" "model_trace:3589@result" "name:smallerNumberArrays"  : Array__Int__Standard__natural.map__ref 
 
 let def #"calculator.ads" 50 0 0#"W:diverges:N" "GP_Subp:calculator.ads:50" 
   (__void_param : unit)
  requires { #"calculator.ads" 50 0 0# true }
  ensures { #"calculator.ads" 50 0 0# (#"calculator.ads" 60 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:calculator.ads:60:27" "GP_Id:70" "comment:                   post =>(for all k in smallerNumberArrays'Result'Range =>
                          ^ calculator.ads:60:27:VC_POSTCONDITION" (forall k #"calculator.ads" 60 0 0#  "model" "name:k" "model_trace:3707"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k)) < (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k)))) then (
    ( "GP_Pretty_Ada:3732" "GP_Sloc:calculator.ads:62:32" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k))) )) else (
    ( "GP_Pretty_Ada:3741" "GP_Sloc:calculator.ads:64:32" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k))) ))) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:50 *)
  ;
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__smallernumberarrays__v1.v1 True False True True) };
   assume {  (Calculator__naturalarray___axiom.dynamic_invariant Calculator__smallernumberarrays__v2.v2 True False True True) };
   assume {  (Standard__natural___axiom.dynamic_invariant Calculator__smallernumberarrays__length.length True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:50 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:50 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.of_int(1))) ((Calculator__smallernumberarrays__length.length > 0)))) ((1 < 10)))) ((1 < 10)))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) (x)))) > 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:x" "model_trace:3671"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 x)) > 0) )) )} 
  ) )))) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((1 <= x)) ((x <= 10)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) (x)))) > 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:x" "model_trace:3688"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 x)) > 0) )) )} 
  ) ))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram calculator.ads:50 *)
  ;
   assume {  ( ( ( ( (Calculator__smallernumberarrays__length.length > 0) /\ (1 < 10) ) /\ (1 < 10) ) /\ (forall x   "model" "name:x" "model_trace:3671"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 x)) > 0) )) ) /\ (forall x   "model" "name:x" "model_trace:3688"  : int.
   ( ( (1 <= x) /\ (x <= 10) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 x)) > 0) )) ) };
   try
   ( (#"calculator.adb" 55 0 0# ( #"calculator.adb" 55 0 0# Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( Calculator__smallernumberarrays__v1.v1 );
   #"calculator.adb" 55 0 0# assume { #"calculator.adb" 55 0 0# (Calculator__naturalarray___axiom.dynamic_invariant Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content True False True True) } ));
   (#"calculator.adb" 56 0 0# ( #"calculator.adb" 56 0 0# Calculator__smallernumberarrays__index.index.int__content <- ( 1 );
   #"calculator.adb" 56 0 0# assume { #"calculator.adb" 56 0 0# (Standard__natural___axiom.dynamic_invariant Calculator__smallernumberarrays__index.index.int__content True False True True) } ));
   (#"calculator.adb" 58 0 0# ());
   ( "GP_Sloc:calculator.adb:58:32" (#"calculator.adb" 58 0 0# ( () (* Translation of an Ada loop from calculator.adb:58 *)
   ;
   (if ((Calculator__smallernumberarrays__index.index.int__content <= 10)) then (
    #"calculator.adb" 58 0 0# try
     ( #"calculator.adb" 58 0 0# abstract ensures {true}(let _ = Calculator__smallernumberarrays__index.index.int__content in (
      ()))
      end ;
     (let temp___197 = #"calculator.adb" 58 0 0# (any int
     ensures {#"calculator.adb" 58 0 0# (result = Calculator__smallernumberarrays__index.index.int__content)} 
     ) in (
      ( #"calculator.adb" 58 0 0# abstract ensures {true}(let _ = Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content in (
       ()))
       end ;
      (let temp___195 = #"calculator.adb" 58 0 0# (any Array__Int__Standard__natural.map
      ensures {#"calculator.adb" 58 0 0# (result = Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop calculator.adb:58 *)
       ;
       ( "GP_Sloc:calculator.adb:59:19" (#"calculator.adb" 59 0 0# ()) );
       ( "GP_Sloc:calculator.adb:59:31" (#"calculator.adb" 59 0 0# ()) );
       ( "GP_Sloc:calculator.adb:59:13" (#"calculator.adb" 59 0 0# (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) (( #"calculator.adb" 59 0 0# assert { #"calculator.adb" 59 0 0# (#"calculator.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:59:19" "GP_Id:57" "comment:            if v1(index) < v2(index) then
                  ^ calculator.adb:59:19:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__smallernumberarrays__index.index.int__content ))))) < (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:59:31" "GP_Shape:L_4_while__if__cmp__ixdcomp" "GP_Id:58" "comment:            if v1(index) < v2(index) then
                              ^ calculator.adb:59:31:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
       Calculator__smallernumberarrays__index.index.int__content ))))))) then (
        ( ( "GP_Sloc:calculator.adb:60:17" (#"calculator.adb" 60 0 0# ()) );
        ( "GP_Sloc:calculator.adb:60:24" (#"calculator.adb" 60 0 0# ()) );
        ( "GP_Sloc:calculator.adb:60:37" (#"calculator.adb" 60 0 0# ()) );
        ( "GP_Sloc:calculator.adb:60:31" (#"calculator.adb" 60 0 0# #"calculator.adb" 60 0 0# Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 60 0 0# assert { #"calculator.adb" 60 0 0# (#"calculator.adb" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:60:24" "GP_Id:56" "comment:                result(index) := v1(index);
                       ^ calculator.adb:60:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__smallernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:60:37" "GP_Id:55" "comment:                result(index) := v1(index);
                                    ^ calculator.adb:60:37:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__smallernumberarrays__index.index.int__content ))))))))) )) ) )) else (
        ( ( "GP_Sloc:calculator.adb:62:17" (#"calculator.adb" 62 0 0# ()) );
        ( "GP_Sloc:calculator.adb:62:24" (#"calculator.adb" 62 0 0# ()) );
        ( "GP_Sloc:calculator.adb:62:37" (#"calculator.adb" 62 0 0# ()) );
        ( "GP_Sloc:calculator.adb:62:31" (#"calculator.adb" 62 0 0# #"calculator.adb" 62 0 0# Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 62 0 0# assert { #"calculator.adb" 62 0 0# (#"calculator.adb" 62 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:62:24" "GP_Shape:L_4_while__if__result_assign__ixdcomp" "GP_Id:54" "comment:                result(index) := v2(index);
                       ^ calculator.adb:62:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__smallernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 62 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:62:37" "GP_Id:53" "comment:                result(index) := v2(index);
                                    ^ calculator.adb:62:37:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__smallernumberarrays__index.index.int__content ))))))))) )) ) )))) );
       ( "GP_Sloc:calculator.adb:64:13" (#"calculator.adb" 64 0 0# ()) );
       ( "GP_Sloc:calculator.adb:64:22" (#"calculator.adb" 64 0 0# ()) );
       ( "GP_Sloc:calculator.adb:64:19" (#"calculator.adb" 64 0 0# #"calculator.adb" 64 0 0# Calculator__smallernumberarrays__index.index.int__content <- ( (#"calculator.adb" 64 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:64:28" "GP_Id:59" "comment:            index := index + 1;
                           ^ calculator.adb:64:28:VC_OVERFLOW_CHECK" "GP_Shape:L_4_while__index_assign__add" (Standard__integer.range_check_((Calculator__smallernumberarrays__index.index.int__content + 1))) )) )) );
       () (* While loop translating the Ada loop from calculator.adb:58 *)
       ;
        while True do
        invariant { 
         (#"calculator.adb" 65 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:65:36" "GP_Id:60" "comment:            pragma Loop_Invariant (index in v1'First .. v1'Last+1);
                                   ^ calculator.adb:65:36:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs__in" ( "GP_Pretty_Ada:2900" "GP_Sloc:calculator.adb:65:36" ( (1 <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= 11) ) ) ))
         }
        invariant { 
         (#"calculator.adb" 66 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:66:36" "GP_Id:61" "comment:            pragma Loop_Invariant (v1'First = result'First and v2'First = result'First and v1'First = v2'First);
                                   ^ calculator.adb:66:36:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs" ( "GP_Pretty_Ada:2929" "GP_Sloc:calculator.adb:66:36" true ) ))
         }
        invariant { 
         (#"calculator.adb" 67 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs" "GP_Sloc:calculator.adb:67:36" "GP_Id:62" "comment:            pragma Loop_Invariant (v1'Last = result'Last and v2'Last = result'Last and v1'Last = v2'Last);
                                   ^ calculator.adb:67:36:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2956" "GP_Sloc:calculator.adb:67:36" true ) ))
         }
        invariant { 
         (#"calculator.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:calculator.adb:68:36" "GP_Id:69" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) < v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                   ^ calculator.adb:68:36:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs__forall" (forall k #"calculator.adb" 68 0 0#  "model" "name:k" "model_trace:2967"  : int.
          ( ( (1 <= k) /\ (k <= (Calculator__smallernumberarrays__index.index.int__content - 1)) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k)) < (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k)))) then (
           ( "GP_Pretty_Ada:2993" "GP_Sloc:calculator.adb:68:95" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k))) )) else (
           ( "GP_Pretty_Ada:3000" "GP_Sloc:calculator.adb:68:118" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k))) ))) )) ))
         }
        ( () (* Assume implicit invariants from the loop calculator.adb:58 *)
        ;
         assume {  ( ( ( ( true /\ (Calculator__naturalarray___axiom.dynamic_invariant Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content False True True True) ) /\ (forall temp___196   : int.
         (if (( (Calculator__TnaturalarrayD1.first <= temp___196) /\ (temp___196 <= Calculator__TnaturalarrayD1.last) )) then (
          (if (( false /\ false )) then (
           ((Array__Int__Standard__natural.get Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content temp___196) = (Array__Int__Standard__natural.get temp___195 temp___196))) else (
           true))) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant Calculator__smallernumberarrays__index.index.int__content False True True True) ) /\ true ) };
        () (* Check for absence of RTE in the invariant of loop calculator.adb:58 *)
        ;
         abstract ensures {true}(let _ = (Boolean.andb((1 <= Calculator__smallernumberarrays__index.index.int__content)) ((Calculator__smallernumberarrays__index.index.int__content <= 11))) in (
         ()))
         end ;
         abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
         ()))
         end ;
         abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
         ()))
         end ;
         abstract ensures {true}(let _ = ( (let k =  (any int
        ) in (
         (if ((Boolean.andb((1 <= k)) ((k <= (Calculator__smallernumberarrays__index.index.int__content - 1))))) then (
           abstract ensures {true}(let _ = (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:68:79" "GP_Id:67" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) < v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                              ^ calculator.adb:68:79:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))) < (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:68:87" "GP_Id:68" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) < v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                      ^ calculator.adb:68:87:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
          k ))))))) then (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"calculator.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:68:102" "GP_Id:63" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) < v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                     ^ calculator.adb:68:102:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:68:110" "GP_Id:64" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) < v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                             ^ calculator.adb:68:110:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))))) else (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"calculator.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:68:125" "GP_Id:65" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) < v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                                            ^ calculator.adb:68:125:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k ))))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:calculator.adb:68:133" "GP_Id:66" "comment:            pragma Loop_Invariant (for all k in v1'First .. index-1 => (if v1(k) < v2(k) then result(k) = v1(k) else result(k) = v2(k)));
                                                                                                                                    ^ calculator.adb:68:133:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= k) /\ (k <= Calculator__TnaturalarrayD1.last) ) )) };
           k )))))))) in (
           ()))
           end ))))
        ;
         (any bool
        requires { true} 
        ensures { ( (result = True) <-> (forall k   "model" "name:k" "model_trace:2967"  : int.
         ( ( (1 <= k) /\ (k <= (Calculator__smallernumberarrays__index.index.int__content - 1)) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k)) < (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k)))) then (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k)))) else (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k))))) )) )} 
        ) ) in (
         ()))
         end ;
        () (* Loop statements appearing after the loop invariant of loop calculator.adb:58 *)
        ;
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop calculator.adb:58 *)
        ;
        (if (not ( (Calculator__smallernumberarrays__index.index.int__content <= 10) )) then (
          raise Calculator__smallernumberarrays__L_4.L_4));
        ( "GP_Sloc:calculator.adb:59:19" (#"calculator.adb" 59 0 0# ()) );
        ( "GP_Sloc:calculator.adb:59:31" (#"calculator.adb" 59 0 0# ()) );
        ( "GP_Sloc:calculator.adb:59:13" (#"calculator.adb" 59 0 0# (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) (( #"calculator.adb" 59 0 0# assert { #"calculator.adb" 59 0 0# (#"calculator.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:59:19" "GP_Id:57" "comment:            if v1(index) < v2(index) then
                  ^ calculator.adb:59:19:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__cmp__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__smallernumberarrays__index.index.int__content ))))) < (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:59:31" "GP_Shape:L_4_while__if__cmp__ixdcomp" "GP_Id:58" "comment:            if v1(index) < v2(index) then
                              ^ calculator.adb:59:31:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
        Calculator__smallernumberarrays__index.index.int__content ))))))) then (
         ( ( "GP_Sloc:calculator.adb:60:17" (#"calculator.adb" 60 0 0# ()) );
         ( "GP_Sloc:calculator.adb:60:24" (#"calculator.adb" 60 0 0# ()) );
         ( "GP_Sloc:calculator.adb:60:37" (#"calculator.adb" 60 0 0# ()) );
         ( "GP_Sloc:calculator.adb:60:31" (#"calculator.adb" 60 0 0# #"calculator.adb" 60 0 0# Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 60 0 0# assert { #"calculator.adb" 60 0 0# (#"calculator.adb" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:60:24" "GP_Id:56" "comment:                result(index) := v1(index);
                       ^ calculator.adb:60:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__smallernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) ((  assert {  (#"calculator.adb" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__result_assign__ixdcomp" "GP_Sloc:calculator.adb:60:37" "GP_Id:55" "comment:                result(index) := v1(index);
                                    ^ calculator.adb:60:37:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__smallernumberarrays__index.index.int__content ))))))))) )) ) )) else (
         ( ( "GP_Sloc:calculator.adb:62:17" (#"calculator.adb" 62 0 0# ()) );
         ( "GP_Sloc:calculator.adb:62:24" (#"calculator.adb" 62 0 0# ()) );
         ( "GP_Sloc:calculator.adb:62:37" (#"calculator.adb" 62 0 0# ()) );
         ( "GP_Sloc:calculator.adb:62:31" (#"calculator.adb" 62 0 0# #"calculator.adb" 62 0 0# Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content) (( #"calculator.adb" 62 0 0# assert { #"calculator.adb" 62 0 0# (#"calculator.adb" 62 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:62:24" "GP_Shape:L_4_while__if__result_assign__ixdcomp" "GP_Id:54" "comment:                result(index) := v2(index);
                       ^ calculator.adb:62:24:VC_INDEX_CHECK" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__smallernumberarrays__index.index.int__content )) ((Standard__natural__rep.of_rep((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) ((  assert {  (#"calculator.adb" 62 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:calculator.adb:62:37" "GP_Id:53" "comment:                result(index) := v2(index);
                                    ^ calculator.adb:62:37:VC_INDEX_CHECK" "GP_Shape:L_4_while__if__result_assign__ixdcomp" ( (Calculator__TnaturalarrayD1.first <= Calculator__smallernumberarrays__index.index.int__content) /\ (Calculator__smallernumberarrays__index.index.int__content <= Calculator__TnaturalarrayD1.last) ) )) };
         Calculator__smallernumberarrays__index.index.int__content ))))))))) )) ) )))) );
        ( "GP_Sloc:calculator.adb:64:13" (#"calculator.adb" 64 0 0# ()) );
        ( "GP_Sloc:calculator.adb:64:22" (#"calculator.adb" 64 0 0# ()) );
        ( "GP_Sloc:calculator.adb:64:19" (#"calculator.adb" 64 0 0# #"calculator.adb" 64 0 0# Calculator__smallernumberarrays__index.index.int__content <- ( (#"calculator.adb" 64 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:calculator.adb:64:28" "GP_Id:59" "comment:            index := index + 1;
                           ^ calculator.adb:64:28:VC_OVERFLOW_CHECK" "GP_Shape:L_4_while__index_assign__add" (Standard__integer.range_check_((Calculator__smallernumberarrays__index.index.int__content + 1))) )) )) ) )
       done )))
       )))
      )
    with
     Calculator__smallernumberarrays__L_4.L_4 -> ()
    end)) )) );
   ( "GP_Sloc:calculator.adb:70:16" (#"calculator.adb" 70 0 0# ()) );
   ( "GP_Sloc:calculator.adb:70:9" (#"calculator.adb" 70 0 0# ( #"calculator.adb" 70 0 0# calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content <- ( Calculator__smallernumberarrays__result.result__.Array__Int__Standard__natural.map__content );
   #"calculator.adb" 70 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let k =  (any int
  ) in (
   (if ((Boolean.andb((1 <= k)) ((k <= 10)))) then (
     abstract ensures {true}(let _ = (if (((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) (k)))) < (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) (k)))))) then (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content) (k)))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v1.v1) (k)))))) else (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content) (k)))) = (Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Calculator__smallernumberarrays__v2.v2) (k))))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall k   "model" "name:k" "model_trace:3707"  : int.
   ( ( (1 <= k) /\ (k <= 10) ) -> (if (((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k)) < (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k)))) then (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v1.v1 k)))) else (
    ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content k)) = (Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Calculator__smallernumberarrays__v2.v2 k))))) )) )} 
  ) ) in (
   ()))
   end ;
  calculator__smallernumberarrays__result.Array__Int__Standard__natural.map__content )
end
